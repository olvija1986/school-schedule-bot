import os
import json
import uuid
import asyncio
import httpx
from datetime import datetime, timedelta
from fastapi import FastAPI, Request
from telegram import Update, InlineQueryResultArticle, InputTextMessageContent
from telegram.ext import ApplicationBuilder, InlineQueryHandler, CommandHandler, ContextTypes
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger

# ================== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ==================
TOKEN = os.environ.get("TELEGRAM_TOKEN")
BOT_URL = os.environ.get("BOT_URL")  # –Ω–∞–ø—Ä–∏–º–µ—Ä: https://school-schedule-bot.onrender.com
CHAT_ID = os.environ.get("CHAT_ID")  # ID —á–∞—Ç–∞, –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
WEBHOOK_PATH = f"/webhook/{TOKEN}"

if not TOKEN or not BOT_URL:
    raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω—ã TELEGRAM_TOKEN –∏–ª–∏ BOT_URL")
if not CHAT_ID:
    print("‚ö†Ô∏è –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω–∞ ‚Äî –∞–≤—Ç–æ–æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å")

# ================== –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è ==================
with open("schedule.json", "r", encoding="utf-8") as f:
    schedule = json.load(f)

DAY_MAP = {
    "Monday": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
    "Tuesday": "–í—Ç–æ—Ä–Ω–∏–∫",
    "Wednesday": "–°—Ä–µ–¥–∞",
    "Thursday": "–ß–µ—Ç–≤–µ—Ä–≥",
    "Friday": "–ü—è—Ç–Ω–∏—Ü–∞",
    "Saturday": "–°—É–±–±–æ—Ç–∞",
    "Sunday": "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
}

# ================== Inline-–∑–∞–ø—Ä–æ—Å—ã ==================
async def inline_schedule(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.inline_query.query.lower().strip()
    if not query:
        return

    results = []

    if query in ["today", "—Å–µ–≥–æ–¥–Ω—è"]:
        day_eng = datetime.today().strftime("%A")
        day = DAY_MAP.get(day_eng, "–°–µ–≥–æ–¥–Ω—è")
        lessons = schedule.get(day, ["–°–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –∑–∞–Ω—è—Ç–∏–π"])
        text = "\n".join(lessons)
        results.append(InlineQueryResultArticle(
            id=str(uuid.uuid4()),
            title=f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è ({day})",
            input_message_content=InputTextMessageContent(text)
        ))

    elif query in ["tomorrow", "–∑–∞–≤—Ç—Ä–∞"]:
        day_eng = (datetime.today() + timedelta(days=1)).strftime("%A")
        day = DAY_MAP.get(day_eng, "–ó–∞–≤—Ç—Ä–∞")
        lessons = schedule.get(day, ["–ó–∞–≤—Ç—Ä–∞ –Ω–µ—Ç –∑–∞–Ω—è—Ç–∏–π"])
        text = "\n".join(lessons)
        results.append(InlineQueryResultArticle(
            id=str(uuid.uuid4()),
            title=f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ ({day})",
            input_message_content=InputTextMessageContent(text)
        ))

    elif query in ["week", "–Ω–µ–¥–µ–ª—è"]:
        text = ""
        for day, lessons in schedule.items():
            text += f"{day}:\n" + "\n".join(lessons) + "\n\n"
        results.append(InlineQueryResultArticle(
            id=str(uuid.uuid4()),
            title="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é",
            input_message_content=InputTextMessageContent(text.strip())
        ))
    else:
        results.append(InlineQueryResultArticle(
            id=str(uuid.uuid4()),
            title="–í–≤–µ–¥–∏—Ç–µ today, tomorrow –∏–ª–∏ week",
            input_message_content=InputTextMessageContent("–í–≤–µ–¥–∏—Ç–µ: today / tomorrow / week")
        ))

    await update.inline_query.answer(results, cache_time=0)

# ================== –ö–æ–º–∞–Ω–¥—ã ==================
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —à–∫–æ–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π inline-–∑–∞–ø—Ä–æ—Å: @—Ç–≤–æ–π_–±–æ—Ç today / tomorrow / week"
    )

# ================== FastAPI ==================
app = FastAPI()
bot_app = ApplicationBuilder().token(TOKEN).build()
bot_app.add_handler(CommandHandler("start", start))
bot_app.add_handler(InlineQueryHandler(inline_schedule))

# ================== Webhook ==================
@app.post(WEBHOOK_PATH)
async def telegram_webhook(request: Request):
    data = await request.json()
    update = Update.de_json(data, bot_app.bot)
    await bot_app.update_queue.put(update)
    return {"ok": True}

# ================== Ping Render ==================
async def ping_self():
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø–∏–Ω–≥—É–µ—Ç —Å–∞–º —Å–µ–±—è, —á—Ç–æ–±—ã Render Free –Ω–µ –∑–∞—Å—ã–ø–∞–ª"""
    while True:
        try:
            async with httpx.AsyncClient(timeout=10) as client:
                resp = await client.get(f"{BOT_URL}/")
                print(f"[{datetime.now().strftime('%H:%M:%S')}] üîÅ Ping status: {resp.status_code}")
        except Exception as e:
            print(f"[Ping error] {e}")
        await asyncio.sleep(600)  # –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç

# ================== –ê–≤—Ç–æ–æ—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è ==================
async def send_daily_schedule():
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π —á–∞—Ç"""
    if not CHAT_ID:
        return
    try:
        day_eng = datetime.today().strftime("%A")
        day = DAY_MAP.get(day_eng, "–°–µ–≥–æ–¥–Ω—è")
        lessons = schedule.get(day, ["–°–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –∑–∞–Ω—è—Ç–∏–π"])
        text = f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è ({day}):\n\n" + "\n".join(lessons)
        await bot_app.bot.send_message(chat_id=CHAT_ID, text=text)
        print(f"[{datetime.now().strftime('%H:%M:%S')}] ‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {CHAT_ID}")
    except Exception as e:
        print(f"[Send schedule error] {e}")

# ================== Lifespan ==================
@app.on_event("startup")
async def startup_event():
    await bot_app.initialize()
    await bot_app.bot.set_webhook(f"{BOT_URL}{WEBHOOK_PATH}")
    await bot_app.start()
    print("‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –±–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")

    # –ü–∏–Ω–≥ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
    asyncio.create_task(ping_self())

    # –ê–≤—Ç–æ–æ—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ 9:00 (–ø–æ –ú–æ—Å–∫–≤–µ)
    scheduler = AsyncIOScheduler(timezone="Europe/Moscow")
    scheduler.add_job(send_daily_schedule, CronTrigger(hour=9, minute=0))
    scheduler.start()
    print("üïò –ê–≤—Ç–æ–æ—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤–∫–ª—é—á–µ–Ω–∞ (–∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 09:00 –ú–°–ö)")

@app.on_event("shutdown")
async def shutdown_event():
    await bot_app.stop()
    await bot_app.shutdown()
    print("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

# ================== –°—Ç–∞—Ä—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ==================
@app.get("/")
def root():
    return {"status": "Bot is running ‚úÖ"}
