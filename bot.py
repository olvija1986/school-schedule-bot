# bot_schedule_webhook.py
import os
import json
import uuid
import asyncio
from datetime import datetime, timedelta
import httpx
from fastapi import FastAPI, Request
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from telegram import Update, InlineQueryResultArticle, InputTextMessageContent
from telegram.ext import ApplicationBuilder, InlineQueryHandler, CommandHandler, ContextTypes

# ================== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ==================
TOKEN = os.environ.get("TELEGRAM_TOKEN")
CHAT_IDS = os.environ.get("CHAT_IDS")  # —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é: "123456,789012"
BOT_URL = os.environ.get("BOT_URL")  # –ù–∞–ø—Ä–∏–º–µ—Ä: https://your-bot-url.com
WEBHOOK_PATH = f"/webhook/{TOKEN}"

if not TOKEN or not BOT_URL:
    raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è TOKEN –∏–ª–∏ BOT_URL")

# ================== –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è ==================
with open("schedule.json", "r", encoding="utf-8") as f:
    schedule = json.load(f)

# ================== –ú–∞–ø–ø–∏–Ω–≥ –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö –¥–Ω–µ–π –Ω–∞ —Ä—É—Å—Å–∫–∏–µ ==================
DAY_MAP = {
    "Monday": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
    "Tuesday": "–í—Ç–æ—Ä–Ω–∏–∫",
    "Wednesday": "–°—Ä–µ–¥–∞",
    "Thursday": "–ß–µ—Ç–≤–µ—Ä–≥",
    "Friday": "–ü—è—Ç–Ω–∏—Ü–∞",
    "Saturday": "–°—É–±–±–æ—Ç–∞",
    "Sunday": "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
}

# ================== FastAPI ==================
app = FastAPI()
bot_app = ApplicationBuilder().token(TOKEN).build()

# ================== Inline-–∑–∞–ø—Ä–æ—Å—ã ==================
async def inline_schedule(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.inline_query.query.lower().strip()
    if not query:
        return

    results = []

    if query in ["today", "—Å–µ–≥–æ–¥–Ω—è"]:
        day_eng = datetime.today().strftime("%A")
        day = DAY_MAP.get(day_eng, "–°–µ–≥–æ–¥–Ω—è")
        lessons = schedule.get(day, ["–°–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –∑–∞–Ω—è—Ç–∏–π"])
        text = "\n".join(lessons)
        results.append(InlineQueryResultArticle(
            id=str(uuid.uuid4()),
            title=f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è ({day})",
            input_message_content=InputTextMessageContent(text)
        ))

    elif query in ["tomorrow", "–∑–∞–≤—Ç—Ä–∞"]:
        day_eng = (datetime.today() + timedelta(days=1)).strftime("%A")
        day = DAY_MAP.get(day_eng, "–ó–∞–≤—Ç—Ä–∞")
        lessons = schedule.get(day, ["–ó–∞–≤—Ç—Ä–∞ –Ω–µ—Ç –∑–∞–Ω—è—Ç–∏–π"])
        text = "\n".join(lessons)
        results.append(InlineQueryResultArticle(
            id=str(uuid.uuid4()),
            title=f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ ({day})",
            input_message_content=InputTextMessageContent(text)
        ))

    elif query in ["week", "–Ω–µ–¥–µ–ª—è"]:
        text = ""
        for day, lessons in schedule.items():
            text += f"{day}:\n" + "\n".join(lessons) + "\n\n"
        results.append(InlineQueryResultArticle(
            id=str(uuid.uuid4()),
            title="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é",
            input_message_content=InputTextMessageContent(text.strip())
        ))

    else:
        results.append(InlineQueryResultArticle(
            id=str(uuid.uuid4()),
            title="–í–≤–µ–¥–∏—Ç–µ today, tomorrow –∏–ª–∏ week",
            input_message_content=InputTextMessageContent("–í–≤–µ–¥–∏—Ç–µ: today / tomorrow / week")
        ))

    await update.inline_query.answer(results, cache_time=0)

# ================== –ö–æ–º–∞–Ω–¥—ã ==================
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —à–∫–æ–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π inline-–∑–∞–ø—Ä–æ—Å: @YourBotName today / tomorrow / week"
    )

bot_app.add_handler(CommandHandler("start", start))
bot_app.add_handler(InlineQueryHandler(inline_schedule))

# ================== –ê–≤—Ç–æ—Ä–∞—Å—Å—ã–ª–∫–∞ ==================
async def scheduled_message():
    if CHAT_IDS:
        for chat_id in CHAT_IDS.split(","):
            try:
                day_eng = datetime.today().strftime("%A")
                day = DAY_MAP.get(day_eng, "–°–µ–≥–æ–¥–Ω—è")
                lessons = schedule.get(day, ["–°–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –∑–∞–Ω—è—Ç–∏–π"])
                text = f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è ({day}):\n" + "\n".join(lessons)
                await bot_app.bot.send_message(chat_id=int(chat_id), text=text)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ {chat_id}: {e}")

# –†–∞—Å—Å—ã–ª–∫–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 7:00 –∫—Ä–æ–º–µ —Å—É–±–±–æ—Ç—ã –∏ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å—è
trigger = CronTrigger(hour=7, minute=0, day_of_week='mon-fri')
scheduler = AsyncIOScheduler()
scheduler.add_job(scheduled_message, trigger)

# ================== Webhook endpoint ==================
@app.post(WEBHOOK_PATH)
async def telegram_webhook(request: Request):
    data = await request.json()
    update = Update.de_json(data, bot_app.bot)
    await bot_app.update_queue.put(update)
    return {"ok": True}

# ================== Lifespan ==================
@app.on_event("startup")
async def startup_event():
    await bot_app.initialize()
    await bot_app.start()

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
    await bot_app.bot.set_webhook(f"{BOT_URL}{WEBHOOK_PATH}")
    print(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {BOT_URL}{WEBHOOK_PATH}")

    # –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    scheduler.start()
    print("‚è±Ô∏è –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω")

    # ================== Ping self task ==================
    async def ping_self():
        async with httpx.AsyncClient() as client:
            while True:
                try:
                    await client.get(BOT_URL)
                    print("üèì Ping –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ ping: {e}")
                await asyncio.sleep(600)  # –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç

    asyncio.create_task(ping_self())

# ================== Shutdown ==================
@app.on_event("shutdown")
async def shutdown_event():
    await bot_app.stop()
    await bot_app.shutdown()
    print("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

# ================== –°—Ç–∞—Ä—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ==================
@app.get("/")
def root():
    return {"status": "Bot is running ‚úÖ"}
