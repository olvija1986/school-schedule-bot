import os
import json
import uuid
from datetime import datetime, timedelta
from fastapi import FastAPI, Request
from telegram import Update, InlineQueryResultArticle, InputTextMessageContent
from telegram.ext import ApplicationBuilder, InlineQueryHandler, CommandHandler, ContextTypes
from apscheduler.schedulers.asyncio import AsyncIOScheduler

# ================== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ==================
TOKEN = os.environ.get("TELEGRAM_TOKEN")
BOT_URL = os.environ.get("BOT_URL")  # –Ω–∞–ø—Ä–∏–º–µ—Ä: https://inline-dice-bot-7xye.onrender.com
WEBHOOK_PATH = f"/webhook/{TOKEN}"

# –ß–∞—Ç—ã –¥–ª—è –∞–≤—Ç–æ—Ä–∞—Å—Å—ã–ª–∫–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é: "chat_id1,chat_id2"
CHAT_IDS = os.environ.get("CHAT_IDS")
if CHAT_IDS:
    CHAT_IDS = [int(cid.strip()) for cid in CHAT_IDS.split(",")]

if not TOKEN or not BOT_URL:
    raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω—ã TELEGRAM_TOKEN –∏–ª–∏ BOT_URL")

# ================== –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è ==================
with open("schedule.json", "r", encoding="utf-8") as f:
    schedule = json.load(f)

DAY_MAP = {
    "Monday": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
    "Tuesday": "–í—Ç–æ—Ä–Ω–∏–∫",
    "Wednesday": "–°—Ä–µ–¥–∞",
    "Thursday": "–ß–µ—Ç–≤–µ—Ä–≥",
    "Friday": "–ü—è—Ç–Ω–∏—Ü–∞",
    "Saturday": "–°—É–±–±–æ—Ç–∞",
    "Sunday": "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
}

# ================== Inline-–∑–∞–ø—Ä–æ—Å—ã ==================
async def inline_schedule(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.inline_query.query.lower().strip()
    if not query:
        return

    results = []

    if query in ["today", "—Å–µ–≥–æ–¥–Ω—è"]:
        day_eng = datetime.today().strftime("%A")
        day = DAY_MAP.get(day_eng, "–°–µ–≥–æ–¥–Ω—è")
        lessons = schedule.get(day, ["–°–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –∑–∞–Ω—è—Ç–∏–π"])
        text = "\n".join(lessons)
        results.append(InlineQueryResultArticle(
            id=str(uuid.uuid4()),
            title=f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è ({day})",
            input_message_content=InputTextMessageContent(text)
        ))

    elif query in ["tomorrow", "–∑–∞–≤—Ç—Ä–∞"]:
        day_eng = (datetime.today() + timedelta(days=1)).strftime("%A")
        day = DAY_MAP.get(day_eng, "–ó–∞–≤—Ç—Ä–∞")
        lessons = schedule.get(day, ["–ó–∞–≤—Ç—Ä–∞ –Ω–µ—Ç –∑–∞–Ω—è—Ç–∏–π"])
        text = "\n".join(lessons)
        results.append(InlineQueryResultArticle(
            id=str(uuid.uuid4()),
            title=f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ ({day})",
            input_message_content=InputTextMessageContent(text)
        ))

    elif query in ["week", "–Ω–µ–¥–µ–ª—è"]:
        text = ""
        for day, lessons in schedule.items():
            text += f"{day}:\n" + "\n".join(lessons) + "\n\n"
        results.append(InlineQueryResultArticle(
            id=str(uuid.uuid4()),
            title="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é",
            input_message_content=InputTextMessageContent(text.strip())
        ))
    else:
        results.append(InlineQueryResultArticle(
            id=str(uuid.uuid4()),
            title="–í–≤–µ–¥–∏—Ç–µ today, tomorrow –∏–ª–∏ week",
            input_message_content=InputTextMessageContent("–í–≤–µ–¥–∏—Ç–µ: today / tomorrow / week")
        ))

    await update.inline_query.answer(results, cache_time=0)

# ================== –ö–æ–º–∞–Ω–¥—ã ==================
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —à–∫–æ–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π inline-–∑–∞–ø—Ä–æ—Å: @—Ç–≤–æ–π_–±–æ—Ç today / tomorrow / week"
    )

# ================== FastAPI ==================
app = FastAPI()
bot_app = ApplicationBuilder().token(TOKEN).build()
bot_app.add_handler(CommandHandler("start", start))
bot_app.add_handler(InlineQueryHandler(inline_schedule))

# ================== Webhook ==================
@app.post(WEBHOOK_PATH)
async def telegram_webhook(request: Request):
    data = await request.json()
    update = Update.de_json(data, bot_app.bot)
    await bot_app.update_queue.put(update)
    return {"ok": True}

# ================== –ê–≤—Ç–æ—Ä–∞—Å—Å—ã–ª–∫–∞ ==================
scheduler = AsyncIOScheduler()

async def send_daily_schedule():
    if not CHAT_IDS:
        print("‚ö†Ô∏è CHAT_IDS –Ω–µ –∑–∞–¥–∞–Ω—ã ‚Äî –∞–≤—Ç–æ–æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å")
        return

    day_eng = datetime.today().strftime("%A")
    day = DAY_MAP.get(day_eng, "–°–µ–≥–æ–¥–Ω—è")
    lessons = schedule.get(day, ["–°–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –∑–∞–Ω—è—Ç–∏–π"])
    text = f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è ({day}):\n" + "\n".join(lessons)

    for chat_id in CHAT_IDS:
        try:
            await bot_app.bot.send_message(chat_id=chat_id, text=text)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ —á–∞—Ç {chat_id}: {e}")

# –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 09:00
scheduler.add_job(send_daily_schedule, "cron", hour=9, minute=0)

# ================== Lifespan ==================
@app.on_event("startup")
async def startup_event():
    await bot_app.initialize()
    await bot_app.bot.set_webhook(f"{BOT_URL}{WEBHOOK_PATH}")
    await bot_app.start()
    scheduler.start()
    print("‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –±–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")

@app.on_event("shutdown")
async def shutdown_event():
    await bot_app.stop()
    await bot_app.shutdown()
    print("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

# ================== –°—Ç–∞—Ä—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ==================
@app.get("/")
def root():
    return {"status": "Bot is running ‚úÖ"}
